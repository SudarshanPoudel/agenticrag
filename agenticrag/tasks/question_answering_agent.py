from typing import Union

from agenticrag.core.llm_client import LLMClient
from agenticrag.tasks.base import BaseTask
from agenticrag.tasks.utils.prompts import QA_PROMPT
from agenticrag.types import BaseMessage
from agenticrag.utils.logging_config import setup_logger
from agenticrag.types.exceptions import TaskExecutionError

logger = setup_logger(__name__)

class QuestionAnsweringTask(BaseTask):
    """
    Task that performs question answering using file-based context.
    It reads content from the given file, constructs a prompt using the user's question,
    and returns an answer generated by the language model.
    """

    def __init__(self, llm: Union[LLMClient, str] = "openai/gpt-4o"):
        self.llm = LLMClient(llm) if isinstance(llm, str) else llm

    @property
    def name(self):
        return "question_answering"

    @property
    def description(self):
        return (
            "This task answers questions based on given file content. "
            "Use it when user just want an simple text answer for their query."
            "It takes a query and file path as input and returns the answer."
        )

    def execute(self, query: str, file_path: str) -> str:
        """
        Executes question answering task using file content as context.

        Args:
            query: The user's question.
            file_path: Path to the file containing context.
        """
        try:
            logger.info(f"Running QuestionAnswering task for query: '{query}' on file: '{file_path}'")

            with open(file_path, 'r') as file:
                context = file.read()

            if not context.strip():
                raise TaskExecutionError("Context file is empty.")

            messages = [
                BaseMessage(role="system", content=QA_PROMPT),
                BaseMessage(role="user", content=f"Context:\n{context}\n\nQuestion: {query}")
            ]

            logger.debug("Sending messages to LLM for response.")
            response = self.llm.invoke(messages)

            logger.info("Answer generated successfully.")
            return response.content

        except Exception as e:
            logger.error(f"QuestionAnswering task execution failed: {e}")
            raise TaskExecutionError(str(e)) from e
